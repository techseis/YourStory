@model ArticleModel

@using YStory.Core.Domain.Catalog
@using YStory.Services

<div class="panel-group">
    <p>
        @T("Admin.Catalog.Articles.ArticleAttributes.Hint")
    </p>
    @if (Model.Id > 0)
    {
        if (Model.AvailableArticleAttributes.Count > 0)
        {
            <div id="articleattribute-edit" class="nav-tabs-custom">
                <ul class="nav nav-tabs">
                    @Html.RenderBootstrapTabHeader("tab-attributes", @T("Admin.Catalog.Articles.ArticleAttributes.Attributes"), true, "tab-attributes")
                    @Html.RenderBootstrapTabHeader("tab-attribute-combinations", @T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations"))
                </ul>
                <div class="tab-content">
                    @Html.RenderBootstrapTabContent("tab-attributes", @TabAttributes(), true, "tab-attributes")
                    @Html.RenderBootstrapTabContent("tab-attribute-combinations", @TabAttributeCombinations())
                </div>
            </div>
        }
        else
        {
            <div class="panel panel-default">
                <div class="panel-body">
                    @T("Admin.Catalog.Articles.ArticleAttributes.NoAttributesAvailable")
                </div>
            </div>
        }
    }
    else
    {
        <div class="panel panel-default">
            <div class="panel-body">
                @T("Admin.Catalog.Articles.ArticleAttributes.SaveBeforeEdit")
            </div>
        </div>
    }
</div>

@helper TabAttributes()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <div id="articleattributemappings-grid"></div>
            <script>
                $(document).ready(function() {
                    $("#articleattributemappings-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeMappingList", "Article", new { articleId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                create: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeMappingInsert", "Article", new { articleId = Model.Id }))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                update: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeMappingUpdate", "Article"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeMappingDelete", "Article"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        ArticleAttribute: { editable: true, type: "string" },
                                        ArticleAttributeId: { editable: true, type: "number" },
                                        TextPrompt: { editable: true, type: "string" },
                                        IsRequired: { editable: true, type: "boolean" },
                                        AttributeControlType: { editable: true, type: "string" },
                                        AttributeControlTypeId: { editable: true, type: "number" },
                                        //ArticleId: { editable: false, type: "number" },
                                        DisplaySubscription: { editable: true, type: "number" },
                                        ShouldHaveValues: { editable: false, type: "boolean" },
                                        TotalValues: { editable: false, type: "number" },
                                        ValidationRulesAllowed: { editable: false, type: "boolean" },
                                        ConditionAllowed: { editable: false, type: "boolean" },
                                        Id: { editable: false, type: "number" }
                                    }
                                }
                            },
                            requestEnd: function(e) {
                                if (e.type == "create" || e.type == "update") {
                                    this.read();
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            numeric: false,
                            previousNext: false,
                            info: false,
                            @Html.Partial("_GridPagerMessages")
                        },
                        toolbar: [{ name: "create", text: "@T("Admin.Common.AddNewRecord")" }],
                        edit: function(e) {
                            if (e.model.isNew()) {
                                //little hack here
                                //pre-select the first value of kendoui dropdownlist datasource
                                //for some reasons (maybe, bug) it always sends 0
                                //if no value has been selected (changed) in the dropdownlist
                                if (allArticleAttributes.length > 0) {
                                    e.model.ArticleAttributeId = allArticleAttributes[0].Id;
                                }
                                if (allAttributeControlTypes.length > 0) {
                                    e.model.AttributeControlTypeId = allAttributeControlTypes[0].Id;
                                }
                            }
                        },
                        editable: {
                            confirmation: "@T("Admin.Common.DeleteConfirmation")",
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [
                            {
                                field: "ArticleAttributeId",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Fields.Attribute")",
                                width: 200,
                                editor: articleAttributeDropDownEditor,
                                template: "#:ArticleAttribute#"
                            }, {
                                field: "TextPrompt",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Fields.TextPrompt")",
                                width: 150
                            }, {
                                field: "IsRequired",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Fields.IsRequired")",
                                width: 100,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: '# if(IsRequired) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                            },
                            {
                                field: "AttributeControlTypeId",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Fields.AttributeControlType")",
                                width: 250,
                                editor: attributeControlTypeDropDownEditor,
                                template: "#:AttributeControlType#"
                            },
                            {
                                field: "DisplaySubscription",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Fields.DisplaySubscription")",
                                width: 150,
                                //integer format
                                format: "{0:0}"
                            }, {
                                field: "ShouldHaveValues",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Values")",
                                width: 150,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: '# if(ShouldHaveValues) {# <a class="btn btn-default" href="@Url.Content("~/Admin/Article/EditAttributeValues/")?articleAttributeMappingId=#=Id#">@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Values.ViewLink")</a> <div>@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Values.TotalValues") #=TotalValues#</div>#}  #'
                            },
                            {
                                field: "ValidationRulesAllowed",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.ValidationRules")",
                                width: 150,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: "# if(ValidationRulesAllowed) {# <a class=\"btn btn-default\" href='javascript:OpenWindow(\"@Url.Content("~/Admin/Article/ArticleAttributeValidationRulesPopup/")#=Id#?btnId=btnRefreshArticleAttributes&formId=article-form\", 800, 320, true);'>@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.ValidationRules.ViewLink")</a> <div>#=ValidationRulesString#</div>#}  #"
                            },
                            {
                                field: "ConditionAllowed",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Condition")",
                                width: 150,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: "# if(ConditionAllowed) {# <a class=\"btn btn-default\" href='javascript:OpenWindow(\"@Url.Content("~/Admin/Article/ArticleAttributeConditionPopup/")?articleAttributeMappingId=#=Id#&btnId=btnRefreshArticleAttributes&formId=article-form\", 800, 400, true);'>@T("Admin.Catalog.Articles.ArticleAttributes.Attributes.Condition.ViewLink")</a> <div>#=ConditionString#</div>#}  #"
                            },
                            {
                                command: [
                                    {
                                        name: "edit",
                                        text: {
                                            edit: "@T("Admin.Common.Edit")",
                                            update: "@T("Admin.Common.Update")",
                                            cancel: "@T("Admin.Common.Cancel")"
                                        }
                                    }, {
                                        name: "destroy",
                                        text: "@T("Admin.Common.Delete")"
                                    }
                                ],
                                width: 200
                            }
                        ]
                    });
                });

                //local datasource
                var allArticleAttributes = [
                    @for (int i = 0; i < Model.AvailableArticleAttributes.Count; i++)
                    {
                        var articleAttributeItem = Model.AvailableArticleAttributes[i];
                        <text>
                            {
                                Id: @(articleAttributeItem.Value),
                                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(articleAttributeItem.Text)))"
                            }
                                </text>
                        if (i != Model.AvailableArticleAttributes.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                ];

                var allAttributeControlTypes = [
                    @{
                        var allAttributeControlTypes = (from act in AttributeControlType.DropdownList.ToSelectList()
                            select new {Id = act.Value, Name = act.Text}).ToList();
                    }
                            @for (int i = 0; i < allAttributeControlTypes.Count; i++)
                    {
                        var attributeControlType = allAttributeControlTypes[i];
                        <text>
                            {
                                Id: @(attributeControlType.Id),
                                Name: "@(Html.Raw(HttpUtility.JavaScriptStringEncode(attributeControlType.Name)))"
                            }
                            </text>
                        if (i != allAttributeControlTypes.Count - 1)
                        {
                            <text>,</text>
                        }
                    }
                ];

                function articleAttributeDropDownEditor(container, options) {
                    $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:ArticleAttributeId"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            autoBind: false,
                            dataSource: allArticleAttributes
                        });
                }

                function attributeControlTypeDropDownEditor(container, options) {
                    $('<input required data-text-field="Name" data-value-field="Id" data-bind="value:AttributeControlTypeId"/>')
                        .appendTo(container)
                        .kendoDropDownList({
                            autoBind: false,
                            dataSource: allAttributeControlTypes
                        });
                }
            </script>
            <input type="submit" id="btnRefreshArticleAttributes" style="display: none" />
            <script type="text/javascript">
                $(document).ready(function () {
                    $('#btnRefreshArticleAttributes').click(function () {
                        //refresh grid
                        var grid = $("#articleattributemappings-grid").data('kendoGrid');
                        grid.dataSource.read();

                        //return false to don't reload a page
                        return false;
                    });
                });
            </script>
        </div>
    </div>
}

@helper TabAttributeCombinations()
{
    <div class="panel panel-default">
        <div class="panel-body">
            <p>
                @T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Description")
            </p>

            <div id="attributecombinations-grid"></div>

            <script>
                $(document).ready(function() {
                    $("#attributecombinations-grid").kendoGrid({
                        dataSource: {
                            type: "json",
                            transport: {
                                read: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeCombinationList", "Article", new {articleId = Model.Id}))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                update: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeCombinationUpdate", "Article"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                },
                                destroy: {
                                    url: "@Html.Raw(Url.Action("ArticleAttributeCombinationDelete", "Article"))",
                                    type: "POST",
                                    dataType: "json",
                                    data: addAntiForgeryToken
                                }
                            },
                            schema: {
                                data: "Data",
                                total: "Total",
                                errors: "Errors",
                                model: {
                                    id: "Id",
                                    fields: {
                                        //ArticleId: { editable: false, type: "number" },
                                        AttributesXml: { editable: false, type: "string" },
                                        Warnings: { editable: false, type: "string" },
                                        StockQuantity: { editable: true, type: "number" },
                                        AllowOutOfStockSubscriptions: { editable: true, type: "boolean" },
                                        Sku: { editable: true, type: "string" },
                                        PublisherPartNumber: { editable: true, type: "string" },
                                        Gtin: { editable: true, type: "string" },
                                        OverriddenPrice: { editable: true, type: "number" },
                                        NotifyAdminForQuantityBelow: { editable: true, type: "number" },
                                        Id: { editable: false, type: "number" }
                                    }
                                }
                            },
                            requestEnd: function(e) {
                                if (e.type == "update") {
                                    this.read();
                                }
                            },
                            error: function(e) {
                                display_kendoui_grid_error(e);
                                // Cancel the changes
                                this.cancelChanges();
                            },
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true
                        },
                        pageable: {
                            refresh: true,
                            numeric: false,
                            previousNext: false,
                            info: false,
                            @Html.Partial("_GridPagerMessages")
                        },
                        editable: {
                            confirmation: "@T("Admin.Common.DeleteConfirmation")",
                            mode: "inline"
                        },
                        scrollable: false,
                        columns: [
                            {
                                field: "AttributesXml",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.Attributes")",
                                width: 400,
                                template: "#=AttributesXml# # if(Warnings !== null) {# <div><span style=\"color: red\">#=Warnings#</span></div> #}  #",
                                encoded: false
                            }, {
                                field: "StockQuantity",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.StockQuantity")",
                                width: 150,
                                //integer format
                                format: "{0:0}"
                            }, {
                                field: "AllowOutOfStockSubscriptions",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.AllowOutOfStockSubscriptions")",
                                width: 150,
                                headerAttributes: { style: "text-align:center" },
                                attributes: { style: "text-align:center" },
                                template: '# if(AllowOutOfStockSubscriptions) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                            }, {
                                field: "Sku",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.Sku")",
                                width: 200
                            }, {
                                field: "PublisherPartNumber",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.PublisherPartNumber")",
                                width: 200
                            }, {
                                field: "Gtin",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.Gtin")",
                                width: 200
                            }, {
                                field: "OverriddenPrice",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.OverriddenPrice")",
                                width: 200,
                                editor: function(container, options) {
                                    $('<input name="' + options.field + '"/>')
                                        .appendTo(container)
                                        .kendoNumericTextBox({
                                            format: "{0:n4}",
                                            decimals: 4
                                        });
                                }
                            }, {
                                field: "NotifyAdminForQuantityBelow",
                                title: "@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.Fields.NotifyAdminForQuantityBelow")",
                                width: 150,
                                //integer format
                                format: "{0:0}"
                            }, {
                                command: [
                                    {
                                        name: "edit",
                                        text: {
                                            edit: "@T("Admin.Common.Edit")",
                                            update: "@T("Admin.Common.Update")",
                                            cancel: "@T("Admin.Common.Cancel")"
                                        }
                                    }, {
                                        name: "destroy",
                                        text: "@T("Admin.Common.Delete")"
                                    }
                                ],
                                width: 200
                            }
                        ]
                    });
                });
            </script>

            <input type="submit" id="btnRefreshCombinations" style="display: none" />
            <script type="text/javascript">
                $(document).ready(function() {
                    //refresh button
                    $('#btnRefreshCombinations').click(function() {
                        //refresh grid
                        var grid = $("#attributecombinations-grid").data('kendoGrid');
                        grid.dataSource.read();

                        //return false to don't reload a page
                        return false;
                    });
                
                    //generate combinations
                    $('#btnGenerateAllCombinations').click(function() {
                        if (confirm('@T("Admin.Common.AreYouSure")')) {

                            var postData = {

                            };
                            addAntiForgeryToken(postData);

                            $.ajax({
                                cache: false,
                                type: 'POST',
                                url: '@Url.Action("GenerateAllAttributeCombinations", "Article", new {articleId = Model.Id})',
                                data: postData,
                                dataType: 'json',
                                success: function(data) {
                                    //refresh grid
                                    var grid = $("#attributecombinations-grid").data('kendoGrid');
                                    grid.dataSource.read();
                                },
                                error: function(xhr, ajaxOptions, thrownError) {
                                    alert('Error while generating attribute combinations');
                                }
                            });
                        }
                        return false;
                    });
                });
            </script>
        </div>
        <div class="panel-footer">
            <button type="submit" id="btnAddNewCombination" onclick="javascript:OpenWindow('@(Url.Action("AddAttributeCombinationPopup", "Article", new {articleId = Model.Id, btnId = "btnRefreshCombinations", formId = "article-form"}))', 800, 700, true); return false;" class="btn btn-primary">
                @T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.AddNew")
            </button>
            <button type="button" id="btnGenerateAllCombinations" class="btn bg-aqua">@T("Admin.Catalog.Articles.ArticleAttributes.AttributeCombinations.GenerateAll")</button>
        </div>
    </div>
}
