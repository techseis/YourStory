@model ContributorModel

@Html.ValidationSummary(false)
@Html.HiddenFor(model => model.Id)

<script>
    $(document).ready(function() {
        bindBootstrapTabSelectEvent('contributor-edit');
    });
</script>

<div class="content">
    <div class="form-horizontal">
        <div class="row">
            <div class="col-md-12 clearfix">
                <div class="pull-left">
                    @Html.Action("Mode", "Setting", new { modeName = "contributor-advanced-mode" })
                </div>
            </div>
        </div>
        <div id="contributor-edit" class="nav-tabs-custom">
            <ul class="nav nav-tabs">
                @Html.RenderBootstrapTabHeader("tab-info", @T("Admin.Contributors.Info"), true)
                @Html.RenderBootstrapTabHeader("tab-seo", @T("Admin.Common.SEO"), customCssClass: "advanced-setting")
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabHeader("tab-contributor-notes", @T("Admin.Contributors.ContributorNotes"), customCssClass: "advanced-setting")
                }
            </ul>
            <div class="tab-content">
                @Html.RenderBootstrapTabContent("tab-info", @TabInfo(), true)
                @Html.RenderBootstrapTabContent("tab-seo", @TabSeo())
                @if (Model.Id > 0)
                {
                    @Html.RenderBootstrapTabContent("tab-contributor-notes", @TabContributorNotes())
                }
            </div>
        </div>
    </div>
</div>

@{
    //custom tabs
    var eventMessage = new AdminTabStripCreated(this.Html, "contributor-edit");
    EngineContext.Current.Resolve<IEventPublisher>().Publish(eventMessage);
    foreach (var eventBlock in eventMessage.BlocksToRender)
    {
        @eventBlock
    }
}

@*save selected tab name*@
<input type="hidden" id="selected-tab-name" name="selected-tab-name" value="@(Html.GetSelectedTabName())">

@helper TabInfo()
{
    <script type="text/javascript">
        $(document).ready(function() {
            $("#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)").click(togglePageSize);
            togglePageSize();
        });

        function togglePageSize() {
            if ($('#@Html.FieldIdFor(model => model.AllowCustomersToSelectPageSize)').is(':checked')) {
                $('#pnlPageSize').hide();
                $('#pnlPageSizeOptions').show();
            } else {
                $('#pnlPageSize').show();
                $('#pnlPageSizeOptions').hide();
            }
        }
    </script>

    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                @(Html.LocalizedEditor<ContributorModel, ContributorLocalizedModel>("contributor-info-localized",
                      @<div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.YStoryLabelFor(model => model.Locales[item].Name)
                              </div>
                              <div class="col-md-9">
                                  @Html.YStoryEditorFor(model => model.Locales[item].Name)
                                  @Html.ValidationMessageFor(model => model.Locales[item].Name)
                              </div>
                          </div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.YStoryLabelFor(model => model.Locales[item].Description)
                              </div>
                              <div class="col-md-9">
                                  @Html.EditorFor(model => model.Locales[item].Description, "RichEditor")
                                  @Html.ValidationMessageFor(model => model.Locales[item].Description)
                              </div>
                          </div>
                          @Html.HiddenFor(model => model.Locales[item].LanguageId)
                      </div>
    ,
                      @<div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.YStoryLabelFor(model => model.Name)
                              </div>
                              <div class="col-md-9">
                                  @Html.YStoryEditorFor(model => model.Name, required: true)
                                  @Html.ValidationMessageFor(model => model.Name)
                              </div>
                          </div>
                          <div class="form-group">
                              <div class="col-md-3">
                                  @Html.YStoryLabelFor(model => model.Description)
                              </div>
                              <div class="col-md-9">
                                  @Html.EditorFor(x => x.Description, "RichEditor")
                                  @Html.ValidationMessageFor(model => model.Description)
                              </div>
                          </div>
                      </div>
                      ))
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.Email)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(model => model.Email, required: true)
                        @Html.ValidationMessageFor(model => model.Email)
                    </div>
                </div>
                @if (Model.Id > 0)
                {
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.AssociatedCustomers)
                        </div>
                        <div class="col-md-9">
                            @if (Model.AssociatedCustomers.Count > 0)
                            {
                                for (int i = 0; i < Model.AssociatedCustomers.Count; i++)
                                {
                                    @Html.ActionLink(Model.AssociatedCustomers[i].Email, "Edit", "Customer", new { id = Model.AssociatedCustomers[i].Id }, new { })
                                    if (i != Model.AssociatedCustomers.Count - 1)
                                    {
                                        <text>,  </text>
                                    }
                                }
                            }
                            else
                            {
                                @T("Admin.Contributors.Fields.AssociatedCustomerEmails.None")
                            }
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.Active)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(model => model.Active)
                        @Html.ValidationMessageFor(model => model.Active)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.PictureId)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(model => model.PictureId)
                        @Html.ValidationMessageFor(model => model.PictureId)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.AdminComment)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryTextAreaFor(model => model.AdminComment)
                        @Html.ValidationMessageFor(model => model.AdminComment)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.AllowCustomersToSelectPageSize)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(x => x.AllowCustomersToSelectPageSize)
                        @Html.ValidationMessageFor(model => model.AllowCustomersToSelectPageSize)
                    </div>
                </div>
                <div class="form-group advanced-setting" id="pnlPageSize">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.PageSize)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(x => x.PageSize)
                        @Html.ValidationMessageFor(model => model.PageSize)
                    </div>
                </div>
                <div class="form-group advanced-setting" id="pnlPageSizeOptions">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.PageSizeOptions)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(x => x.PageSizeOptions)
                        @Html.ValidationMessageFor(model => model.PageSizeOptions)
                    </div>
                </div>
                <div class="form-group advanced-setting">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.DisplaySubscription)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryEditorFor(model => model.DisplaySubscription)
                        @Html.ValidationMessageFor(model => model.DisplaySubscription)
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default advanced-setting">
            <div class="panel-heading">
                @T("Admin.Contributors.Address")
            </div>
            <div class="panel-body">
                @Html.EditorFor(model => model.Address, "Address")
            </div>
        </div>
    </div>
}

@helper TabSeo()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                @(Html.LocalizedEditor<ContributorModel, ContributorLocalizedModel>("contributor-seo-localized",
                @<div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.Locales[item].MetaKeywords)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(model => model.Locales[item].MetaKeywords)
                            @Html.ValidationMessageFor(model => model.Locales[item].MetaKeywords)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.Locales[item].MetaDescription)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryTextAreaFor(model => model.Locales[item].MetaDescription)
                            @Html.ValidationMessageFor(model => model.Locales[item].MetaDescription)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.Locales[item].MetaTitle)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(model => model.Locales[item].MetaTitle)
                            @Html.ValidationMessageFor(model => model.Locales[item].MetaTitle)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.Locales[item].SeName)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(model => model.Locales[item].SeName)
                            @Html.ValidationMessageFor(model => model.Locales[item].SeName)
                        </div>
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#@Html.FieldIdFor(model => model.Locales[item].SeName)').on('input propertychange paste', function () {
                                var parameters = {
                                    entityId: '@Model.Id',
                                    entityName: 'Contributor',
                                    seName: $(this).val()
                                };
                                warningValidation('@Url.Action("UrlReservedWarning", "Common")', '@Html.FieldNameFor(model => model.Locales[item].SeName)', parameters);
                            });
                        });
                    </script>
                    @Html.HiddenFor(model => model.Locales[item].LanguageId)
                </div>
    ,
                @<div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.MetaKeywords)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(x => x.MetaKeywords)
                            @Html.ValidationMessageFor(model => model.MetaKeywords)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.MetaDescription)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryTextAreaFor(x => x.MetaDescription)
                            @Html.ValidationMessageFor(model => model.MetaDescription)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.MetaTitle)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(x => x.MetaTitle)
                            @Html.ValidationMessageFor(model => model.MetaTitle)
                        </div>
                    </div>
                    <div class="form-group">
                        <div class="col-md-3">
                            @Html.YStoryLabelFor(model => model.SeName)
                        </div>
                        <div class="col-md-9">
                            @Html.YStoryEditorFor(x => x.SeName)
                            @Html.ValidationMessageFor(model => model.SeName)
                        </div>
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $('#@Html.FieldIdFor(model => model.SeName)').on('input propertychange paste', function () {
                                var parameters = {
                                    entityId: '@Model.Id',
                                    entityName: 'Contributor',
                                    seName: $(this).val()
                                };
                                warningValidation('@Url.Action("UrlReservedWarning", "Common")', '@Html.FieldNameFor(model => model.SeName)', parameters);
                            });
                        });
                    </script>
                </div>))
            </div>
        </div>
    </div>
}

@helper TabContributorNotes()
{
    <div class="panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                <div id="contributornotes-grid"></div>

                <script>
                    $(document).ready(function() {
                        $("#contributornotes-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url:
                                            "@Html.Raw(Url.Action("ContributorNotesSelect", "Contributor", new {contributorId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    },
                                    destroy: {
                                        url:
                                            "@Html.Raw(Url.Action("ContributorNoteDelete", "Contributor", new {contributorId = Model.Id}))",
                                        type: "POST",
                                        dataType: "json",
                                        data: addAntiForgeryToken
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors",
                                    model: {
                                        id: "Id",
                                        fields: {
                                            //do not implicitly specify all fields
                                            //we do it only for fields which implicitly require it
                                            //otherwise, they'll be formatted wrong way
                                            CreatedOn: { type: "date" }
                                        }
                                    }
                                },
                                error: function(e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                numeric: false,
                                previousNext: false,
                                info: false,
                                @Html.Partial("_GridPagerMessages")
                            },
                            editable: {
                                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                mode: "inline"
                            },
                            scrollable: false,
                            columns: [
                                {
                                    field: "CreatedOn",
                                    title: "@T("Admin.Contributors.ContributorNotes.Fields.CreatedOn")",
                                    width: 200,
                                    type: "date",
                                    format: "{0:G}"
                                }, {
                                    field: "Note",
                                    title: "@T("Admin.Contributors.ContributorNotes.Fields.Note")",
                                    encoded: false
                                }, {
                                    command: { name: "destroy", text: "@T("Admin.Common.Delete")" },
                                    title: "@T("Admin.Common.Delete")",
                                    width: 100
                                }
                            ]
                        });
                    });
                </script>
            </div>
        </div>

        <div class="panel panel-default">
            <div class="panel-heading">
                @T("Admin.Contributors.ContributorNotes.AddTitle")
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-3">
                        @Html.YStoryLabelFor(model => model.AddContributorNoteMessage)
                    </div>
                    <div class="col-md-9">
                        @Html.YStoryTextAreaFor(model => model.AddContributorNoteMessage)
                        @Html.ValidationMessageFor(model => model.AddContributorNoteMessage)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-9 col-md-offset-3">
                        <button type="button" id="addContributorNote" class="btn btn-primary">@T("Admin.Contributors.ContributorNotes.AddButton")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function() {
            $('#addContributorNote').click(function() {
                var contributorNoteMessage = $("#@Html.FieldIdFor(model => model.AddContributorNoteMessage)").val();
                $('#addContributorNote').attr('disabled', true);

                var postData = {
                    message: contributorNoteMessage,
                    contributorId: @Model.Id
                };
                addAntiForgeryToken(postData);

                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@( Url.Action("ContributorNoteAdd", "Contributor"))",
                    data: postData,
                    success: function(data) {
                        var grid = $("#contributornotes-grid").data('kendoGrid');
                        grid.dataSource.read();
                        $('#addContributorNote').attr('disabled', false);
                    },
                    error: function(xhr, ajaxOptions, thrownError) {
                        alert('Failed to add contributor note.');
                        $('#addContributorNote').attr('disabled', false);
                    }
                });
            });
        });
    </script>
}
